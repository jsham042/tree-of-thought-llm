{
    "run.py": "Description: This file is responsible for running a task and logging the results.\nDependencies: os, json, argparse, tot.tasks, tot.methods.bfs, tot.models.gpt_usage\nFunctions:\n- Name: run\n  Description: Runs a task and logs the results.\n  Parameters: args (argparse.Namespace) - Command-line arguments.\n  Returns: None\n\n- Name: parse_args\n  Description: Parses the command-line arguments.\n  Parameters: None\n  Returns: args (argparse.Namespace) - Parsed command-line arguments.",
    "setup.py": "Description: This file is responsible for setting up the package and its dependencies for the \"Tree of Thoughts: Deliberate Problem Solving with Large Language Models\" implementation.\n\nDependencies: This file has a dependency on the `setuptools` module.\n\nFunctions:\n- None\n\nThis file does not contain any functions. It is used to configure the package and its dependencies for installation and distribution.",
    "src/tot/__init__.py": "Description: This file contains the version number for the application.\n\nDependencies: None\n\nFunctions:\n- Name: None\n  Description: This file does not contain any functions.\n  Parameters: None\n  Returns: None",
    "src/tot/methods/bfs.py": "Description: This file contains functions for solving a task using the GPT (Generative Pre-trained Transformer) model.\n\nDependencies: \n- itertools\n- numpy\n- functools.partial\n- tot.models.gpt\n\nFunctions:\n- Name: get_value\n  Description: Retrieves the value of a task given input values x and y.\n  Parameters: \n    - task (object) - The task object.\n    - x (object) - The input value x.\n    - y (object) - The input value y.\n    - n_evaluate_sample (int) - The number of samples to evaluate.\n    - cache_value (bool) - Whether to cache the value or not (default: True).\n  Returns: value (object) - The value of the task.\n\n- Name: get_values\n  Description: Retrieves the values of a task for multiple y values.\n  Parameters: \n    - task (object) - The task object.\n    - x (object) - The input value x.\n    - ys (list) - The list of y values.\n    - n_evaluate_sample (int) - The number of samples to evaluate.\n    - cache_value (bool) - Whether to cache the value or not (default: True).\n  Returns: values (list) - The values of the task for each y value.\n\n- Name: get_votes\n  Description: Retrieves the votes for a task given input values x and ys.\n  Parameters: \n    - task (object) - The task object.\n    - x (object) - The input value x.\n    - ys (list) - The list of y values.\n    - n_evaluate_sample (int) - The number of samples to evaluate.\n  Returns: values (list) - The votes for each y value.\n\n- Name: get_proposals\n  Description: Retrieves the proposals for a task given input values x and y.\n  Parameters: \n    - task (object) - The task object.\n    - x (object) - The input value x.\n    - y (object) - The input value y.\n  Returns: proposals (list) - The proposals for the task.\n\n- Name: get_samples\n  Description: Retrieves the samples for a task given input values x and y.\n  Parameters: \n    - task (object) - The task object.\n    - x (object) - The input value x.\n    - y (object) - The input value y.\n    - n_generate_sample (int) - The number of samples to generate.\n    - prompt_sample (str) - The type of prompt sample to use ('standard' or 'cot').\n    - stop (object) - The stop condition for generating samples.\n  Returns: samples (list) - The generated samples.\n\n- Name: solve\n  Description: Solves a task using the GPT model.\n  Parameters: \n    - args (object) - The arguments object.\n    - task (object) - The task object.\n    - idx (int) - The index of the task.\n    - to_print (bool) - Whether to print the output or not (default: True).\n  Returns: \n    - ys (list) - The output candidates.\n    - steps (dict) - The information about each step of the solution.\n\n- Name: naive_solve\n  Description: Solves a task using the GPT model without printing the output.\n  Parameters: \n    - args (object) - The arguments object.\n    - task (object) - The task object.\n    - idx (int) - The index of the task.\n    - to_print (bool) - Whether to print the output or not (default: True).\n  Returns: ys (list) - The output candidates.",
    "src/tot/models.py": "Description: This file manages the integration with the OpenAI API for chat-based language models.\n\nDependencies: os, openai, backoff\n\nFunctions:\n- Name: completions_with_backoff\n  Description: A function that handles API requests to the OpenAI ChatCompletion endpoint with exponential backoff.\n  Parameters: **kwargs - Keyword arguments to be passed to the OpenAI ChatCompletion.create() method.\n  Returns: A ChatCompletion object.\n\n- Name: gpt\n  Description: Generates a response from the chat-based language model given a prompt.\n  Parameters: prompt (str) - The user's input prompt, model (str) - The name of the language model to use (default: \"gpt-4\"), temperature (float) - The randomness of the generated output (default: 0.7), max_tokens (int) - The maximum number of tokens in the generated output (default: 1000), n (int) - The number of responses to generate (default: 1), stop (str) - The stopping condition for the generated output (default: None).\n  Returns: A list of generated responses.\n\n- Name: chatgpt\n  Description: Generates a response from the chat-based language model given a list of messages.\n  Parameters: messages (list) - A list of message objects containing the role (\"user\" or \"assistant\") and content (str) of each message, model (str) - The name of the language model to use (default: \"gpt-4\"), temperature (float) - The randomness of the generated output (default: 0.7), max_tokens (int) - The maximum number of tokens in the generated output (default: 1000), n (int) - The number of responses to generate (default: 1), stop (str) - The stopping condition for the generated output (default: None).\n  Returns: A list of generated responses.\n\n- Name: gpt_usage\n  Description: Calculates the usage and cost of the chat-based language model.\n  Parameters: backend (str) - The name of the language model backend to calculate usage for (default: \"gpt-4\").\n  Returns: A dictionary containing the number of completion tokens, prompt tokens, and cost of usage.",
    "src/tot/prompts/crosswords.py": "Description: This file contains the code for solving 5x5 mini crosswords by generating the output rows based on the given input of horizontal and vertical clues.\n\nDependencies: None\n\nFunctions:\n- Name: solve_crossword\n  Description: Generates the output rows for a 5x5 mini crossword based on the given input of horizontal and vertical clues.\n  Parameters: \n    - input (str) - The input string containing the horizontal and vertical clues.\n  Returns: \n    - output (str) - The output string containing the generated rows of letters separated by spaces.",
    "src/tot/prompts/game24.py": "Description: This file contains prompts and functions related to the game of obtaining the number 24 using basic arithmetic operations.\n\nDependencies: None\n\nFunctions:\n- Name: 5-shot\n  Description: Generates a prompt and answer for the 5-shot version of the game, where the goal is to obtain 24 using 4 input numbers and basic arithmetic operations.\n  Parameters: input (str) - The input numbers separated by spaces.\n  Returns: A string containing the prompt and answer for the given input.\n\n- Name: cot_prompt\n  Description: Generates a prompt and answer for the cot_prompt version of the game, where the goal is to obtain 24 using 4 input numbers and basic arithmetic operations, with each step only allowing the use of two remaining numbers.\n  Parameters: input (str) - The input numbers separated by spaces.\n  Returns: A string containing the prompt and answer for the given input.\n\n- Name: propose_prompt\n  Description: Generates a prompt with possible next steps for the propose_prompt version of the game, where the goal is to obtain 24 using 4 input numbers and basic arithmetic operations, with each step only allowing the use of two remaining numbers.\n  Parameters: input (str) - The input numbers separated by spaces.\n  Returns: A string containing the prompt with possible next steps for the given input.\n\n- Name: value_prompt\n  Description: Generates a prompt to evaluate if given numbers can reach 24 using basic arithmetic operations.\n  Parameters: input (str) - The input numbers separated by spaces.\n  Returns: A string containing the prompt to evaluate if the given numbers can reach 24.\n\n- Name: value_last_step_prompt\n  Description: Generates a prompt to judge if a given answer is correct in reaching 24 using the given input numbers and basic arithmetic operations.\n  Parameters: input (str) - The input numbers separated by spaces, answer (str) - The answer expression.\n  Returns: A string containing the prompt to judge if the given answer is correct.",
    "src/tot/prompts/text.py": "Description: This file contains three different prompts for generating coherent passages, analyzing choices, and scoring coherency.\nDependencies: None\nFunctions:\n- Name: standard_prompt\n  Description: Generates a coherent passage of four short paragraphs with a specified end sentence.\n  Parameters: input (str) - The desired end sentence for each paragraph.\n  Returns: passage (str) - The generated passage.\n\n- Name: cot_prompt\n  Description: Generates a coherent passage of four short paragraphs with a specified end sentence, along with a plan for writing the passage.\n  Parameters: input (str) - The desired end sentence for each paragraph.\n  Returns: plan (str) - The plan for writing the passage, passage (str) - The generated passage.\n\n- Name: vote_prompt\n  Description: Generates a prompt for analyzing choices and determining the most promising one.\n  Parameters: None\n  Returns: prompt (str) - The generated prompt.\n\n- Name: compare_prompt\n  Description: Generates a prompt for analyzing the coherency of two passages and determining which one is more coherent.\n  Parameters: None\n  Returns: prompt (str) - The generated prompt.\n\n- Name: score_prompt\n  Description: Generates a prompt for analyzing the coherency of a passage and assigning a coherency score.\n  Parameters: None\n  Returns: prompt (str) - The generated prompt.",
    "src/tot/tasks/__init__.py": "Description: This file contains a function called \"get_task\" that returns an instance of a specific task based on the given name.\n\nDependencies: The file depends on the following modules: tot.tasks.game24, tot.tasks.text, and tot.tasks.crosswords.\n\nFunctions:\n- Name: get_task\n  Description: Returns an instance of a specific task based on the given name.\n  Parameters: name (str) - The name of the task to be returned.\n  Returns: An instance of the corresponding task class (Game24Task, TextTask, or MiniCrosswordsTask) based on the given name. If the given name is not recognized, a NotImplementedError is raised.",
    "src/tot/tasks/base.py": "Description: This file defines a Task class that is responsible for managing tasks in the application.\nDependencies: os\nFunctions:\n- Name: __init__\n  Description: Initializes a Task object.\n  Parameters: self - The Task object.\n  Returns: None\n\n- Name: __len__\n  Description: Returns the length of the Task object.\n  Parameters: self - The Task object.\n  Returns: int - The length of the Task object.\n\n- Name: get_input\n  Description: Retrieves the input for a specific index in the Task object.\n  Parameters: self - The Task object, idx (int) - The index of the input.\n  Returns: str - The input for the specified index.\n\n- Name: test_output\n  Description: Tests the output for a specific index in the Task object.\n  Parameters: self - The Task object, idx (int) - The index of the output, output (str) - The output to be tested.\n  Returns: None",
    "src/tot/tasks/crosswords.py": "Description: This file contains the implementation of the MiniCrosswordsEnv class, which represents the environment for the Mini Crosswords game.\n\nDependencies:\n- re: Regular expression module for pattern matching.\n- os: Operating system module for file path manipulation.\n- json: JSON module for reading JSON files.\n- tot.tasks.base: Module containing the base Task class.\n- tot.prompts.crosswords: Module containing prompts for crosswords.\n- tot.models.gpt: Module containing the GPT model.\n\nFunctions:\n- Name: MiniCrosswordsEnv.__init__\n  Description: Initializes the MiniCrosswordsEnv object.\n  Parameters: file (str) - The name of the JSON file containing the crossword data.\n  Returns: None\n\n- Name: MiniCrosswordsEnv.__len__\n  Description: Returns the number of crosswords in the file.\n  Parameters: None\n  Returns: n (int) - The number of crosswords.\n\n- Name: MiniCrosswordsEnv.reset\n  Description: Resets the environment to a specific crossword.\n  Parameters: idx (int) - The index of the crossword to reset to, board (list) - The current state of the crossword board, status (list) - The current status of the crossword, steps (int) - The number of steps taken in the crossword.\n  Returns: render (str) - The rendered state of the crossword.\n\n- Name: MiniCrosswordsEnv.prompt_status\n  Description: Prompts the GPT model to predict the status of each crossword answer.\n  Parameters: None\n  Returns: count (dict) - A dictionary containing the count of each status ('sure', 'maybe', 'impossible').\n\n- Name: MiniCrosswordsEnv.render_gt_board\n  Description: Renders the ground truth crossword board.\n  Parameters: None\n  Returns: s (str) - The rendered ground truth crossword board.\n\n- Name: MiniCrosswordsEnv.render_board\n  Description: Renders the current crossword board.\n  Parameters: None\n  Returns: s (str) - The rendered current crossword board.\n\n- Name: MiniCrosswordsEnv.render_clues\n  Description: Renders the crossword clues.\n  Parameters: status (int) - The status of the clues to render (0: unfilled, 1: filled, 2: filled then changed).\n  Returns: s (str) - The rendered crossword clues.\n\n- Name: MiniCrosswordsEnv.render_ans\n  Description: Renders the crossword answers.\n  Parameters: status (int) - The status of the answers to render (0: unfilled, 1: filled, 2: filled then changed).\n  Returns: s (str) - The rendered crossword answers.\n\n- Name: MiniCrosswordsEnv.render_gt_ans\n  Description: Renders the ground truth crossword answers.\n  Parameters: status (int) - The status of the answers to render (0: unfilled, 1: filled, 2: filled then changed).\n  Returns: s (str) - The rendered ground truth crossword answers.\n\n- Name: MiniCrosswordsEnv.render\n  Description: Renders the current state of the crossword.\n  Parameters: status (bool) - Whether to include the status of the crossword.\n  Returns: render (str) - The rendered state of the crossword.\n\n- Name: MiniCrosswordsEnv.get_ans\n  Description: Retrieves the answers for the crossword board.\n  Parameters: board (list) - The crossword board.\n  Returns: ans (list) - The answers for the crossword board.\n\n- Name: MiniCrosswordsEnv.step\n  Description: Takes a step in the crossword game.\n  Parameters: action (str) - The action to take in the format \"h1. apple\" or \"v1. apple\".\n  Returns: render (str) - The rendered state of the crossword after the step, r_all (float) - The reward for completing the crossword, done (bool) - Whether the crossword is completed, info (dict) - Additional information about the step.\n\n- Name: MiniCrosswordsTask.__init__\n  Description: Initializes the MiniCrosswordsTask object.\n  Parameters: file (str) - The name of the JSON file containing the crossword data.\n  Returns: None\n\n- Name: MiniCrosswordsTask.__len__\n  Description: Returns the number of crosswords in the task.\n  Parameters: None\n  Returns: n (int) - The number of crosswords.\n\n- Name: MiniCrosswordsTask.get_input\n  Description: Retrieves the input for a specific crossword.\n  Parameters: idx (int) - The index of the crossword.\n  Returns: input (str) - The input for the crossword.\n\n- Name: MiniCrosswordsTask.test_output\n  Description: Tests the output for a specific crossword.\n  Parameters: idx (int) - The index of the crossword, output (str) - The output to test.\n  Returns: info (dict) - Additional information about the output.\n\n- Name: MiniCrosswordsTask.set_status\n  Description: Sets the status of a crossword based on the input and output.\n  Parameters: x (str) - The input for the crossword, y (str) - The output for the crossword.\n  Returns: None\n\n- Name: MiniCrosswordsTask.standard_prompt_wrap\n  Description: Wraps the input and output in the standard prompt format.\n  Parameters: x (str) - The input for the crossword, y (str) - The output for the crossword.\n  Returns: prompt (str) - The wrapped prompt.\n\n- Name: MiniCrosswordsTask.cot_prompt_wrap\n  Description: Wraps the input and output in the cot prompt format.\n  Parameters: x (str) - The input for the crossword, y (str) - The output for the crossword.\n  Returns: prompt (str) - The wrapped prompt.\n\n- Name: MiniCrosswordsTask.propose_prompt_wrap\n  Description: Wraps the input and output in the propose prompt format.\n  Parameters: x (str) - The input for the crossword, y (str) - The output for the crossword.\n  Returns: prompt (str) - The wrapped prompt.\n\n- Name: MiniCrosswordsTask.propose_outputs_unwrap\n  Description: Unwraps the propose outputs and returns the proposals.\n  Parameters: x (str) - The input for the crossword, y (str) - The output for the crossword, outputs (list) - The propose outputs, n_max_propose (int) - The maximum number of proposals to return.\n  Returns: proposals (list) - The proposals.\n\n- Name: MiniCrosswordsTask.evaluate\n  Description: Evaluates the crossword based on the input and output.\n  Parameters: x (str) - The input for the crossword, y (str) - The output for the crossword, n_evaluate_sample (int) - The number of samples to evaluate.\n  Returns: count (dict) - A dictionary containing the count of each status ('sure', 'maybe', 'impossible').",
    "src/tot/tasks/game24.py": "Description: This file is responsible for implementing the Game24Task class, which is a subclass of the Task class. It provides the functionality to solve the game 24 puzzle.\n\nDependencies:\n- re: Used for regular expression matching.\n- os: Used for file path manipulation.\n- sympy: Used for mathematical expression simplification.\n- pandas: Used for reading data from a csv file.\n- tot.tasks.base: Imported Task and DATA_PATH from the base module.\n- tot.prompts.game24: Imported all variables from the game24 module.\n\nFunctions:\n- Name: get_current_numbers\n  Description: Extracts the current numbers from a given string.\n  Parameters: y (str) - A string containing numbers and other characters.\n  Returns: str - The extracted current numbers.\n\n- Name: Game24Task.__init__\n  Description: Initializes a Game24Task object.\n  Parameters: file (str) - The name of the csv file to be read.\n  Returns: None\n\n- Name: Game24Task.__len__\n  Description: Returns the number of puzzles in the data.\n  Parameters: None\n  Returns: int - The number of puzzles.\n\n- Name: Game24Task.get_input\n  Description: Returns the puzzle at the specified index.\n  Parameters: idx (int) - The index of the puzzle.\n  Returns: str - The puzzle at the specified index.\n\n- Name: Game24Task.test_output\n  Description: Tests the output of the puzzle solution.\n  Parameters: idx (int) - The index of the puzzle, output (str) - The output of the puzzle solution.\n  Returns: dict - A dictionary containing the reward value.\n\n- Name: Game24Task.standard_prompt_wrap\n  Description: Wraps the input and output strings with the standard prompt.\n  Parameters: x (str) - The input string, y (str) - The output string.\n  Returns: str - The wrapped prompt string.\n\n- Name: Game24Task.cot_prompt_wrap\n  Description: Wraps the input and output strings with the cot prompt.\n  Parameters: x (str) - The input string, y (str) - The output string.\n  Returns: str - The wrapped prompt string.\n\n- Name: Game24Task.propose_prompt_wrap\n  Description: Wraps the input and output strings with the propose prompt.\n  Parameters: x (str) - The input string, y (str) - The output string.\n  Returns: str - The wrapped prompt string.\n\n- Name: Game24Task.value_prompt_wrap\n  Description: Wraps the input and output strings with the value prompt.\n  Parameters: x (str) - The input string, y (str) - The output string.\n  Returns: str - The wrapped prompt string.\n\n- Name: Game24Task.value_outputs_unwrap\n  Description: Unwraps the value outputs and calculates the value.\n  Parameters: x (str) - The input string, y (str) - The output string, value_outputs (list) - A list of value outputs.\n  Returns: float - The calculated value.",
    "src/tot/tasks/text.py": "Description: This file is a task class that handles text generation tasks.\nDependencies: os, re, tot.tasks.base.Task, tot.prompts.text, tot.models.gpt\n\nFunctions:\n- Name: __init__\n  Description: Initializes the TextTask object.\n  Parameters: file (str) - The name of the text file to be processed.\n  Returns: None\n\n- Name: __len__\n  Description: Returns the length of the data.\n  Parameters: None\n  Returns: int - The length of the data.\n\n- Name: get_input\n  Description: Retrieves the input at the specified index.\n  Parameters: idx (int) - The index of the input.\n  Returns: str - The input at the specified index.\n\n- Name: test_output\n  Description: Tests the output generated by the model.\n  Parameters: idx (int) - The index of the input, output (str) - The generated output.\n  Returns: dict - A dictionary containing the scores and average score of the generated output.\n\n- Name: standard_prompt_wrap\n  Description: Wraps the input and output with the standard prompt.\n  Parameters: x (str) - The input, y (str) - The output.\n  Returns: str - The wrapped prompt.\n\n- Name: cot_prompt_wrap\n  Description: Wraps the input and output with the cot prompt.\n  Parameters: x (str) - The input, y (str) - The output.\n  Returns: str - The wrapped prompt.\n\n- Name: vote_prompt_wrap\n  Description: Wraps the input and multiple outputs with the vote prompt.\n  Parameters: x (str) - The input, ys (list) - The list of outputs.\n  Returns: str - The wrapped prompt.\n\n- Name: vote_outputs_unwrap\n  Description: Unwraps the vote outputs and returns the vote results.\n  Parameters: vote_outputs (list) - The list of vote outputs, n_candidates (int) - The number of candidates.\n  Returns: list - The vote results.\n\n- Name: compare_prompt_wrap\n  Description: Wraps the input and two outputs with the compare prompt.\n  Parameters: x (str) - The input, ys (list) - The list of outputs.\n  Returns: str - The wrapped prompt.\n\n- Name: compare_output_unwrap\n  Description: Unwraps the compare output and returns the result.\n  Parameters: compare_output (str) - The compare output.\n  Returns: float - The result of the comparison."
}